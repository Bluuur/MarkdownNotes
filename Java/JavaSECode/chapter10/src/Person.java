/*
	Person表示人类
		每一个人都有奈年龄这样的属性
		年龄age，int类型

	不进行封装，Person类的age属性对外暴露，可以在外部程序中随意访问，导致了不安全
	可以通过封装解决这个问题
*/

//这是没有封装的Person
/*
public class Person{
	//实例变量（属性）
	int age; //age属性是暴露的，在外部程序可以随意访问。导致了不安全
}
*/
//不使用封装机制，程序有什么缺点

//尝试封装一下
//不再对外暴露复杂的数据，封装一下
//对外只提供简单的操作入口
//优点：数据安全了，调用者也方便了
public class Person{
    //private表示私有的，被这个关键字修饰以后，该数据只能在本类中访问
    //离开了类体，age属性就无法访问
    private int age;

    //对外提供简单的访问入口
    //外部程序只能通过调用以下代码来完成访问
    //思考：应该对外提供几个访问入口
    //这些操作入口是否应该是方法？
    //写一个方法专门来完成读（get）
    //写一个方法专门来完成写（set）
    //get和set方法应不应该带有static？是定义为实例方法，还是普通方法
    //实例方法，通过get和set是要对对象的实例变量进行操作
    //因此，封装的第二步：对外提供公开的set方法和get方法作为操作入口（都是实例方法）
    /*
    [修饰符列表] 返回值类型 方法名（形参列表）{
    }
     */

    //get方法
    public int getAge() {
        return age;
    }

    //set方法
    public void setAge(int age) {
        //在这里设置关卡，以访输入的值不合法
        if (age < 0 || age > 150){
            System.out.println("输入的年龄不合法");
            return;
        }
        this.age = age;
    }

    //注意：
//        Java开发规范中有要求，set方法和get方法要按满足以下格式
//          get方法的要求
//          public 返回值类型 get+属性首字母大写（无参）{
//          }

//          set方法的要求
//          public void set+属性名首字母大写（有1个参数）{
//          }
}