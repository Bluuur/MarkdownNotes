///*
//	构造方法
//		什么是构造方法，有什么用
//			构造方法是一种特殊的方法，通过构造方法可以完成对象的创建
//			以及实例变量的初始化
//			构造方法是用来创建对象，并且同时给对象的属性赋值
//			注意：实例变量没有手动赋值的时候，系统会赋予默认值
//
//		****重点：当一个类没有提供任何构造方法
//		系统会默认提供一个无参数的构造方法
//		这个方法被称为缺省构造器
//
//		调用构造方法
//			使用new运算符来调用构造方法
//			new 构造方法名(实际参数列表);
//
//		构造方法的语法结构
//			[修饰符列表] 构造方法名(形式参数列表){
//				构造方法体；
//				//通常在构造方法体中给属性赋值，完成属性的初始化
//			}
//
//			注意：修饰符列表目前统一写public,不要写public static
//				构造方法名必须和类名一致
//				构造方法不需要指定返回值类型，也不能写void，
//				写上void表示普通方法，就不是构造方法了
//
//				没有返回值类型的方法，编译器会判断该方法为构造方法
//				此时编译器会检测方法名和类名是否一致
//
//		普通方法的语法结构
//			[修饰符列表] 返回值类型 方法名(形式参数列表){
//				方法体;
//			}
//
//		当一个类中没有提供任何构造方法，系统默认提供以恶搞无参数的构造方法，这个无参数的构造方法叫做缺省构造器
//
//		当一个类中手动提供了构造方法，那么系统将不再提供无参数构造方法
//
//		构造方法支持重载
//		在一个类中，构造方法可以有多个
//		这些构造方法的名字都是一样的，都和类名一致
//			方法重载特点：
//				在同一个类中给，方法名相同，参数列表不同
//*/
//public class Constructor01{
//	public static void main(String[] args){
//
//		//创建Student类型的对象
//		Student s1 = new Student();//这里等号右边调用了无参数的构造方法
//
//		//输出“引用”
//		//只要此处输出的结果不是null，说明这个对象一定是完成了创建
//		//此处输出的结果不是null
//		System.out.println(s1);//Student@5caf905d
//
//		//调用Student类的无参数构造方法
//		new Student();//到这里，无参数的构造方法执行了两次，创建了两个Student对象，只是这里创建的对象没有进行引用
//	}
//}